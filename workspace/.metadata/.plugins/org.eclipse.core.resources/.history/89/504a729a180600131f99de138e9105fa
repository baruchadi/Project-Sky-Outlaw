package com.isolatedpixel.skymission.world;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.FPSLogger;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.isolatedpixel.skymission.StartPoint;
import com.isolatedpixel.skymission.graphics.Assets;
import com.isolatedpixel.skymission.mobs.Player;
import com.isolatedpixel.skymission.objects.Wood;
import com.isolatedpixel.skymission.screens.DemoWorld;

public class WorldRenderer {

	public static final float CAMERA_WIDTH = 10f;
	public static final float CAMERA_HEIGHT = 8f;

	private DemoWorld world;
	public OrthographicCamera bg_cam, cam, hud_cam;

	ShapeRenderer debugRenderer = new ShapeRenderer();

	private Texture bobTexture;
	private Texture blockTexture;

	private SpriteBatch batcher = new SpriteBatch();

	private int width;
	private int height;
	private float ppuX;
	private float ppuY;
	FPSLogger logger;
	private boolean debug = StartPoint.debug;

	// Texture bh1;
	// Sprite s;

	public void setSize(int w, int h) {
		this.width = w;
		this.height = h;
		ppuX = (float) width / CAMERA_WIDTH;
		ppuY = (float) height / CAMERA_HEIGHT;

	}

	public WorldRenderer(DemoWorld world) {

		this.world = world;
		this.cam = new OrthographicCamera(CAMERA_WIDTH, CAMERA_HEIGHT);
		this.cam.position.set(5, 4f, 0);
		this.cam.update();

		this.bg_cam = new OrthographicCamera(1,1);
		
		this.bg_cam.position.set(0,0,0);
		this.bg_cam.update();
		
		logger = new FPSLogger();

		Assets.LoadGameStuff();

		// bh1 = new Texture(Gdx.files.internal("textures/bh1.png"));
		// s = new Sprite(bh1);
		// s.setPosition(world.getBob().getBounds().x,
		// world.getBob().getBounds().y);
		// s.setSize(world.getBob().getBounds().width,
		// world.getBob().getBounds().height);

	}

	// boolean flipped = false;
	// boolean b2 = false;

	public void Render() {
		Player bob = world.getBob();

		batcher.setProjectionMatrix(bg_cam.combined);
		
		
		batcher.begin();
		
		batcher.draw(Assets.background, bg_cam.position.x, bg_cam.position.y,1,1);
		
		batcher.setProjectionMatrix(cam.combined);
		
		// boolean b1 = bob.isFacingLeft();
		// if (b1 != b2) {
		// s.flip(true, false);
		// }
		// b2 = b1;

		for (int i = 0; i < world.wood.size; i++) {
			batcher.draw(Assets.wood, world.wood.get(i).getPosition().x,
					world.wood.get(i).getPosition().y, world.wood.get(i)
							.getBounds().width,
					world.wood.get(i).getBounds().height);
		}
		for (int i = 0; i < world.dirt.size; i++) {
			batcher.draw(Assets.dirt, world.dirt.get(i).getPosition().x,
					world.dirt.get(i).getPosition().y, world.dirt.get(i)
							.getBounds().width,
					world.dirt.get(i).getBounds().height);
		}
		batcher.draw(Assets.door,world.door.getPosition().x,world.door.getPosition().y,world.door.getBounds().width,world.door.getBounds().height);
		
		
		batcher.draw(bob.getFrame(), bob.getPosition().x, bob.getPosition().y,
				bob.getBounds().width, bob.getBounds().height);

		batcher.draw(Assets.bar, 7, bob.getPosition().y,
				1, 1);
		batcher.draw(Assets.shelf, 9.25f, bob.getPosition().y,
				.75f, 4f);
		
		
		for(int i = 0; i < world.bullets.size; i++){
			world.bullets.get(i).update(Gdx.graphics.getDeltaTime());
			batcher.draw(Assets.bullet, world.bullets.get(i).getPosition().x, world.bullets.get(i).getPosition().y,world.bullets.get(i).getBounds().width,world.bullets.get(i).getBounds().height);
		}
		
		
		batcher.end();

		if (debug) {
			debugRenderer.setProjectionMatrix(cam.combined);
			debugRenderer.begin(ShapeType.Line);
			for (Wood block : world.getBlocks()) {
				Rectangle rect = block.getBounds();
				float x1 = block.getPosition().x + rect.x;
				float y1 = block.getPosition().y + rect.y;
				debugRenderer.setColor(new Color(1, 0, 0, 1));
				debugRenderer.rect(x1, y1, rect.width, rect.height);
			}

			Rectangle rect = bob.getBounds();
			float x1 = bob.getPosition().x + rect.x;
			float y1 = bob.getPosition().y + rect.y;
			debugRenderer.setColor(new Color(0, 1, 0, 1));
			debugRenderer.rect(x1, y1, rect.width, rect.height);
			debugRenderer.end();
			logger.log();
		}
		
		
		debug = StartPoint.debug;
		
	}

}
