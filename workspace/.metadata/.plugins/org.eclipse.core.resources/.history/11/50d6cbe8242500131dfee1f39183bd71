package com.isolatedpixel.skymission.graphics;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.assets.loaders.SkinLoader;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;

public class Assets {
	static AssetManager manager = new AssetManager();

	public static final String MenuSkin = "json/menuSkin.json",
			Splash = "gfx/logo.png";

	public static Animation walkLeftAnimation;
	public static Animation walkRightAnimation;
	public static Animation IdleLeftAnimation;
	public static Animation IdleRightAnimation;

	public static TextureRegion bobIdleLeft;
	public static TextureRegion bobIdleRight;
	public static TextureRegion bobCrouchLeft;
	public static TextureRegion bobCrouchRight;
	public static TextureRegion wood, dirt, door;

	public static TextureRegion bar, shelf, selected;

	static TextureAtlas playerAtlas, floorAtlas, dAtlas;

	public static Texture bullet, background;

	public static void loadPlayer() {
		playerAtlas = new TextureAtlas(
				Gdx.files.internal("textures/bounty.pack"));

		bobIdleRight = playerAtlas.findRegion("bh_2iss");
		TextureRegion idle2 = playerAtlas.findRegion("b_2iss");
		IdleRightAnimation = new Animation(.85f, bobIdleRight, idle2);

		TextureRegion idle1 = new TextureRegion(idle2);
		idle1.flip(true, false);
		bobIdleLeft = new TextureRegion(bobIdleRight);
		bobIdleLeft.flip(true, false);

		IdleLeftAnimation = new Animation(.85f, bobIdleLeft, idle1);

		TextureRegion walkRight = playerAtlas.findRegion("w_2iss");
		TextureRegion walkLeft = new TextureRegion(walkRight);
		walkLeft.flip(true, false);

		walkRightAnimation = new Animation(.1f, bobIdleRight, walkRight);
		walkLeftAnimation = new Animation(.1f, bobIdleLeft, walkLeft);

		bobCrouchRight = playerAtlas.findRegion("crouch_ss");
		bobCrouchLeft = new TextureRegion(bobCrouchRight);
		bobCrouchLeft.flip(true, false);
	}

	public static void loadPlayer(int o) {
		playerAtlas = new TextureAtlas(Gdx.files.local("test/test.pack"));

		bobIdleRight = playerAtlas.findRegion("idle1");
		TextureRegion idle2 = playerAtlas.findRegion("breathe1");
		IdleRightAnimation = new Animation(.85f, bobIdleRight, idle2);

		TextureRegion idle1 = playerAtlas.findRegion("breathe1");
		idle1.flip(true, false);
		bobIdleLeft = playerAtlas.findRegion("idle1");
		bobIdleLeft.flip(true, false);

		IdleLeftAnimation = new Animation(.85f, bobIdleLeft, idle1);

		TextureRegion walkRight = playerAtlas.findRegion("walk1");
		TextureRegion walkLeft = new TextureRegion(walkRight);
		walkLeft.flip(true, false);

		walkRightAnimation = new Animation(.1f, bobIdleRight, walkRight);
		walkLeftAnimation = new Animation(.1f, bobIdleLeft, walkLeft);

		bobCrouchRight = playerAtlas.findRegion("crouch1");
		bobCrouchLeft = new TextureRegion(bobCrouchRight);
		bobCrouchLeft.flip(true, false);
	}

	public static void loadFloor() {
		floorAtlas = new TextureAtlas(Gdx.files.internal("textures/floor.pack"));

		dAtlas = new TextureAtlas(Gdx.files.internal("ui/utils.pack"));

		selected = dAtlas.findRegion("default.selected");

		wood = floorAtlas.findRegion("wood_floor");
		dirt = floorAtlas.findRegion("dirt_floor");

		bar = floorAtlas.findRegion("bar");
		shelf = floorAtlas.findRegion("shelf");

	}

	public static void LoadGameStuff() {

		loadPlayer();
		loadFloor();
		door = floorAtlas.findRegion("door");
		bullet = new Texture(Gdx.files.internal("textures/bullet.png"));
		background = new Texture(
				Gdx.files.internal("background/background4.png"));

	}

	public static void loadMenus() {

		// manager.load("ui/utils.pack", TextureAtlas.class);
		manager.load(Splash, Texture.class);
		manager.finishLoading();
		manager.load(MenuSkin, Skin.class, new SkinLoader.SkinParameter(
				"ui/utils.pack"));

	}

	public synchronized static <T> T get(String fileName, Class<T> type) {
		return manager.get(fileName, type);
	}

	public static boolean update() {
		return manager.update();
	}

	public static float getProgress() {
		// TODO Auto-generated method stub
		return manager.getProgress();

	}

	public static boolean isLoaded(String fileName) {
		return manager.isLoaded(fileName);
	}

	public static void disposeMenu() {

		manager.unload(Splash);

	}

}